name: 🚀 Release Build and Publish
permissions: write-all
on:
  push:
    tags:
      - 'v*.*.*' # 触发条件：版本标签 (例如: v1.8.0)

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 设置 Node.js 环境
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # 安装依赖
      - name: 📦 Install dependencies
        run: npm ci

      # 验证版本一致性
      - name: ✅ Validate version consistency
        run: |
          # 获取标签版本（移除 v 前缀）
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "标签版本: $TAG_VERSION"

          # 从 package.json 获取版本号
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "package.json 版本: $PACKAGE_VERSION"

          # 检查版本是否一致
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ 错误: 标签版本 ($TAG_VERSION) 与 package.json 版本 ($PACKAGE_VERSION) 不一致"
            exit 1
          fi

          echo "✅ 版本验证通过: $TAG_VERSION"
          echo "VERSION=$TAG_VERSION" >> $GITHUB_ENV

      # 类型检查
      - name: 🔍 TypeScript check
        run: npm run compile

      # 代码质量检查
      - name: 🧹 Format and lint check
        run: |
          npm run check
          npm run lint

      # 构建所有平台的扩展包
      - name: 🏗️ Build extensions for all platforms
        run: |
          echo "🚀 开始构建扩展包..."
          npm run zip:all

          echo "📁 构建产物列表:"
          ls -la .output/*.zip

      # 验证构建产物
      - name: ✅ Validate build artifacts
        run: |
          echo "🔍 验证构建产物..."

          # 检查必需的文件是否存在
          required_files=(
            ".output/illa-helper-${{ env.VERSION }}-chrome.zip"
            ".output/illa-helper-${{ env.VERSION }}-firefox.zip"
            ".output/illa-helper-${{ env.VERSION }}-safari.zip"
          )

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ 错误: 缺少构建文件 $file"
              exit 1
            else
              echo "✅ 找到文件: $file ($(du -h "$file" | cut -f1))"
            fi
          done

          echo "🎉 所有构建产物验证通过!"

      # 生成 Release Notes
      - name: 📝 Generate Release Notes
        id: release_notes
        run: |
          # 获取上一个标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "📋 生成从 $PREVIOUS_TAG 到 v${{ env.VERSION }} 的更新日志..."
            
            # 生成提交日志（原始格式）
            COMMITS=$(git log --pretty=format:"%s (%h)" $PREVIOUS_TAG..HEAD | head -50)
            
            if [ -z "$COMMITS" ]; then
              RELEASE_NOTES="* 版本更新至 v${{ env.VERSION }}"
            else
              # 使用 awk 进行分类（处理英文: 和中文：，忽略 emoji）
              RELEASE_NOTES=$(echo "$COMMITS" | awk '
                BEGIN {
                  FS = "[:：]";
                }
                {
                  gsub(/🔧|其他emoji/, "", $1);  # 移除 emoji，如果有
                  type = tolower(trim($1));
                  if (type == "") next;
                  msg = $0;  # 整行消息
                  groups[type] = groups[type] ? groups[type] "\n- " msg : "- " msg;
                }
                END {
                  for (t in groups) {
                    printf "### %s\n%s\n\n", toupper(substr(t,1,1)) substr(t,2), groups[t];
                  }
                }
                function trim(s) { gsub(/^[ \t]+|[ \t]+$/, "", s); return s }
              ')
            fi
          else
            echo "📋 首次发布，生成基础发布说明..."
            RELEASE_NOTES="* 初始版本发布 v${{ env.VERSION }}"
          fi

          # 组合完整的 Release Notes
          cat << EOF > release_notes.md
          ### 🔄 更新内容
          $RELEASE_NOTES

          EOF

          echo "📄 Release Notes 预览:"
          cat release_notes.md

      # 创建 GitHub Release 并上传资产
      - name: 🎁 Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 使用 gh CLI 创建发布并上传所有扩展包
          gh release create "${{ env.VERSION }}" \
            --latest \
            --title "${{ env.VERSION }}" \
            --notes-file release_notes.md \
            ".output/illa-helper-${{ env.VERSION }}-chrome.zip" \
            ".output/illa-helper-${{ env.VERSION }}-firefox.zip" \
            ".output/illa-helper-${{ env.VERSION }}-safari.zip"

      # 发布成功通知
      - name: 🎉 Release completed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🎊 发布完成!"
          RELEASE_URL=$(gh release view "v${{ env.VERSION }}" --json url -q .url)
          echo "📦 Release URL: $RELEASE_URL"
          echo "🏷️ 版本: v${{ env.VERSION }}"
          echo "📁 已上传的扩展包:"
          echo "  ✅ Chrome: illa-helper-${{ env.VERSION }}-chrome.zip"
          echo "  ✅ Firefox: illa-helper-${{ env.VERSION }}-firefox.zip"
          echo "  ✅ Safari: illa-helper-${{ env.VERSION }}-safari.zip"
