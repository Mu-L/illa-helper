name: 🚀 Release Build and Publish
permissions:
  contents: write # 明确指定写权限，用于创建 Release

on:
  push:
    tags:
      - 'v*.*.*' # 触发条件：版本标签 (例如: v1.8.0)

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 必须获取所有历史记录，以便 git log 能正常工作

      # 2. 设置 Node.js 环境
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # 3. 安装依赖
      - name: 📦 Install dependencies
        run: npm ci

      # 4. 验证版本一致性并设置环境变量
      - name: ✅ Validate version and set ENV
        run: |
          TAG_NAME=${{ github.ref_name }}
          TAG_VERSION=${TAG_NAME#v}
          echo "Tag name: $TAG_NAME"
          echo "Version number: $TAG_VERSION"

          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "package.json version: $PACKAGE_VERSION"

          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ Error: Tag version ($TAG_VERSION) does not match package.json version ($PACKAGE_VERSION)."
            exit 1
          fi

          echo "✅ Version validation passed: $TAG_VERSION"
          # 将纯版本号存入环境变量，供后续步骤使用
          echo "VERSION=$TAG_VERSION" >> $GITHUB_ENV

      # 5. 代码检查
      - name: 🔍 Code quality checks
        run: |
          npm run compile
          npm run check
          npm run lint

      # 6. 构建所有平台的扩展包
      - name: 🏗️ Build extensions for all platforms
        run: |
          echo "🚀 Starting to build extension packages..."
          npm run zip:all
          echo "📁 Build artifacts list:"
          ls -la .output/*.zip

      # 7. 验证构建产物
      - name: ✅ Validate build artifacts
        run: |
          echo "🔍 Validating build artifacts..."
          required_files=(
            ".output/illa-helper-${{ env.VERSION }}-chrome.zip"
            ".output/illa-helper-${{ env.VERSION }}-firefox.zip"
            ".output/illa-helper-${{ env.VERSION }}-safari.zip"
          )
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Error: Missing build artifact: $file"
              exit 1
            else
              echo "✅ Found artifact: $file ($(du -h "$file" | cut -f1))"
            fi
          done
          echo "🎉 All build artifacts validated successfully!"

      # 8. 生成 Release Notes
      - name: 📝 Generate Release Notes
        run: |
          VERSION=${{ env.VERSION }}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "📋 Generating changelog from $PREVIOUS_TAG to ${{ github.ref_name }}..."
            COMMITS=$(git log --pretty=format:"%s (%h)" $PREVIOUS_TAG..HEAD)
          else
            echo "📋 No previous tag found. This is the first release."
            COMMITS=$(git log --pretty=format:"%s (%h)" HEAD -50)
          fi

          if [ -z "$COMMITS" ]; then
            RELEASE_NOTES="- 版本更新"
          else
            RELEASE_NOTES=$(echo "$COMMITS" | awk '
              BEGIN {
                FS = "[:：]";
                order_count = 8;
                order[1] = "feat";     headers["feat"]     = "✨ Features";
                order[2] = "fix";      headers["fix"]      = "🐛 Bug Fixes";
                order[3] = "perf";     headers["perf"]     = "⚡️ Performance";
                order[4] = "refactor";  headers["refactor"]  = "♻️ Refactoring";
                order[5] = "docs";     headers["docs"]     = "📝 Documentation";
                order[6] = "style";    headers["style"]    = "💄 Styles";
                order[7] = "test";     headers["test"]     = "✅ Testing";
                order[8] = "chore";    headers["chore"]    = "📦 Chores";
              }
              {
                full_message = $0;
                if (NF < 2) {
                  groups["other"] = groups["other"] ? groups["other"] "\n- " full_message : "- " full_message;
                  next;
                }
                type_field = $1;
                gsub(/^[ \t]+|[ \t]+$/, "", type_field);
                match(type_field, /^[a-zA-Z]+/);
                type = tolower(substr(type_field, RSTART, RLENGTH));
                is_known_type = 0;
                for (i=1; i<=order_count; i++) { if (order[i] == type) { is_known_type = 1; break; } }
                if (is_known_type == 0) {
                  groups["other"] = groups["other"] ? groups["other"] "\n- " full_message : "- " full_message;
                } else {
                  groups[type] = groups[type] ? groups[type] "\n- " full_message : "- " full_message;
                }
              }
              END {
                for (i = 1; i <= order_count; i++) {
                  type = order[i];
                  if (groups[type]) {
                    if (output != "") { output = output "\n" }
                    output = output sprintf("### %s\n%s", headers[type], groups[type]);
                  }
                }
                if (groups["other"]) {
                  if (output != "") { output = output "\n\n" }
                  output = output sprintf("### miscellaneous\n%s", groups["other"]);
                }
                print output;
              }
            ')
          fi

          # -----------------  修改点  -----------------
          # 生成的 Markdown 文件主标题直接使用版本号
          cat << EOF > release_notes.md
          # ${{ env.VERSION }}

          $RELEASE_NOTES
          EOF

          echo "📄 Release Notes Preview:"
          echo "---"
          cat release_notes.md
          echo "---"

      # 9. 创建 GitHub Release 并上传资产
      - name: 🎁 Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.ref_name }}" \
            --latest \
            --title "${{ env.VERSION }}" \
            --notes-file release_notes.md \
            .output/illa-helper-${{ env.VERSION }}-chrome.zip \
            .output/illa-helper-${{ env.VERSION }}-firefox.zip \
            .output/illa-helper-${{ env.VERSION }}-safari.zip

      # 10. 发布成功通知
      - name: 🎉 Release completed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🎊 Release successful!"
          RELEASE_URL=$(gh release view "${{ github.ref_name }}" --json url -q .url)
          echo "📦 Release URL: $RELEASE_URL"
          # 输出的版本号也保持一致
          echo "🏷️ Version: ${{ env.VERSION }}"
